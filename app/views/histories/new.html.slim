div#app.container
    = form_tag('/histories') do
        div.row
            /検索フォーム
            div.col-sm-4.sm-mg-b-30
                div.card
                    div.card-header
                        div.input-group
                            span.input-group-btn
                                button.btn.btn-secondary type="button" 名前検索
                            input.form-control v-model='filterKey'
                    div.card-block
                        table.table v-if="filterKey != ''"
                            tr.search_patient-list v-for="item in filterItem" v-on:click='insertId(item.id)'
                                td ="{{item.name}}"
            /患者履歴入力フォーム
            div.col-sm-8
                div.card
                    div.card-header
                        / 診療日
                        div.row
                            span.col-12.m-auto.col-sm-4 for="history_date" 来院履歴登録
                            label.col-3.sm-pd-0.col-sm-4.text-right.m-auto for="history_date" 診療日
                            div.col-9.col-sm-4
                                input.form-control type="date" name="history_date" required=""
                    div.card-block
                        / 売り上げ履歴
                        table.table.table-sm.tb-responsive
                            thead
                                tr
                                    th ID
                                    th 名前
                                    th 売上高
                            tbody
                            - (0..8).each do |i|
                                tr
                                    td.width-30 data-label="ID"
                                        /id入力
                                        input.form-control type="number" name="patient_id[]" v-model="id[#{i}]" onchange="checkId(this)"
                                    td.width-30 data-label="名前"
                                        /名前表示
                                        input.form-control type="text" name="patient_name[]" v-model="searchName(id[#{i}])" readonly=""
                                    td.width-40 data-label="金額"
                                        /金額選択
                                        div.form-check.form-check-inline
                                            label.form-check-label
                                                input.form-check-input type="radio" value="4000" name="sales[#{i}]" checked=""  4000
                                        div.form-check.form-check-inline
                                            label.form-check-label
                                                input.form-check-input type="radio" value="3000" name="sales[#{i}]"  3000
                                        div.form-check.form-check-inline
                                            label.form-check-label
                                                input.form-check-input type="radio" value="2500" name="sales[#{i}]"  2500
                        /送信btn
                        = submit_tag "登録", class:"btn btn-primary btn-block"
                        / メニューリンク
                        = render partial: 'shared/menu-link'




javascript:
    // -------------------------------------------------------
    // idのvalidate（html5)
    // -------------------------------------------------------
    window.checkId = function(elm) {
      if (elm.value < 1 || elm.value > gon.patients.length) {
        elm.setCustomValidity('患者名簿に登録されていないIDが入力されています');
      }
      else {
        elm.setCustomValidity('');
      }
    };
    // -------------------------------------------------------
    // vue id検索　名前自動入力
    // -------------------------------------------------------
    var app = new Vue({
        el: '#app',
        data: {
            items: gon.patients,
            filterKey: '',
            id: ['','','','','','','','',''],
        },
        computed: {
            // filterByとlimitBy的な機能でpatientのmodelからデータを検索
            filterItem: function() {
                var count = 0
                return this.items.filter(function(value) {
                    if (value.name.includes(this.filterKey) && count <= 8) {
                        count+=1
                        return true
                    }else {
                        return false
                    }
                }.bind(this))
            },
        },
        methods: {
            //idをフォームに入力するもの
            insertId: function(value) {
                // 未入力のinputに値追加
                for(var i = 0; i < this.id.length; i++) {
                    if(this.id[i] == '') {
                        this.id[i] = value
                        break
                    }
                }
                // 検索フォームを初期化
                this.filterKey = ''
            },
            // idから名前検索表示
            searchName: function(inputId) {
                if(inputId != '') {
                    return this.items.filter(function(value) {
                        return (value.id == inputId)
                    })[0]['name']
                }
            }
        }
    })
